data{
    C <- 10000
    zeros  <- 0
    }
model {
    ###########  PRIORS  #######################
    for (g in 1:2){
    gamma [g,1]  <- 0

    phi[g,s] <- 0
    # logit  constraint  for  survival  probability (phi)
    for (t in 1:(s -1)){
        phi[g,t] <- 1 / (1 + exp(-logit.phi[g,t]))
        logit.phi[g,t] <- alpha.phi[g] + beta.time.phi * TIME[t]

    }
    alpha.phi[g] ~ dnorm(0, 0.01)# alpha.phi on prob      scale
    mean.phi[g]  <- 1 / (1 + exp(-alpha.phi[g]))

    }
    # trend parameter
    beta.time.phi ~ dnorm(0, 0.01)
    # log  constraint  for  fecundity (f)   
    for (t in 1:(s -1)){
        f[t] <- exp(log.f[t])
        log.f[t] <- alpha.f + eps.f[t]+beta.time.f * TIME[t]
        eps.f[t] ~ dnorm(0, tau.f)
    }
    
    alpha.f ~ dnorm(0, 0.01)
    beta.time.f ~ dnorm(0, 0.01)

    # alpha.f on prob      scale
    mean.f  <- exp(alpha.f)
    # temporal  random  variation
    tau.f  <- 1 / (sigma.f * sigma.f)
    sigma.f ~ dunif(0, 2)
    for (t in 1:s){
        # logit  constraint  for  detectability (p)
        p[t] <- 1 / (1 + exp(-logit.p[t]))
        logit.p[t] <- alpha.p
        # no  constraints  for mu
        mu[t] ~ dunif (0,1)
        }
        
    alpha.p ~ dnorm(0, 0.01)
    # alpha.p on prob      scale
    mean.p <- 1 / (1 + exp(-alpha.p))
        
    #########  LIKELIHOOD (ZERO -TRICK) ######
    zeros ~ dpois(zero.mean)
    zero.mean  <- -Lsum + C
    Lsum  <- sum(L)
    for (g in 1:2){

    L[g] <- sum(l.num[g,1:s]) - l.denom[g]
    ##### log -likelihood  for the  first  occasion
    l.num[g,1]  <- (u[g,1] * log(xi[g,1])) + (n[g,1] * log(p[1])) + (secondexpo [g,1] * log(1-p[1])) +(thirdexpo [g,1] * log(phi [g,1])) + (fourthexpo [g,1] * log(mu[1])) +(d[g,1] * log(1-mu[1])) + (fifthexpo [g,1] * log(1-(p[1]*(1 -mu [1])))) +(sixthexpo [g,1] * log(chi [g,1]))
    xi[g,1]  <- 1
    secondexpo_a [g,1]  <- sum(u[g,1:1])
    secondexpo_b [g,1]  <- 0
    secondexpo [g,1]  <- secondexpo_a [g,1] - secondexpo_b [g,1] - n[g,1]
    thirdexpo [g,1]  <- sum(v[g,2:s])
    fourthexpo [g,1]  <- n[g,1]-d[g,1]
    fifthexpo [g,1]  <- sum(u[g,2:s])
    sixthexpo [g,1]  <- v[g,1]-d[g,1]
    ##### log -likelihood  for the  last  occasion
    l.num[g,s] <- (u[g,s] * log(xi[g,s])) + (firstexpo[g,s] * (log(phi[g,s-1]) - log(phi[g,s-1]+f[s -1]))) +(n[g,s] * log(p[s])) + (secondexpo[g,s] * log(1-p[s])) +(fourthexpo[g,s] * log(mu[s])) + (d[g,s] * log(1-mu[s])) +(fifthexpo[g,s] * log(1-(p[s]*(1-mu[s])))) +(sixthexpo[g,s] * log(chi[g,s]))
    chi[g,s] <- 1
    firstexpo[g,s] <- sum(u[g,1:(s-1)])
    secondexpo_a[g,s] <- sum(u[g,1:s])
    secondexpo_b[g,s] <- sum(v[g,1:(s -1)])
    secondexpo[g,s] <- secondexpo_a[g,s] - secondexpo_b[g,s] - n[g,s]
    fourthexpo[g,s] <- n[g,s]-d[g,s]
    fifthexpo[g,s] <- 0
    sixthexpo[g,s] <- v[g,s]-d[g,s]
    #####  likelihood  from  occasion 2 to s-1
    for (i in 2:(s-1)) {
        l.num[g,i] <- (u[g,i] * log(xi[g,i])) + (firstexpo[g,i] * (log(phi[g,i-1]) - log(phi[g,i-1]+f[i -1]))) +(n[g,i] * log(p[i])) + (secondexpo[g,i] * log(1-p[i])) +(thirdexpo[g,i] * log(phi[g,i])) + (fourthexpo[g,i] * log(mu[i])) +(d[g,i] * log(1-mu[i])) + (fifthexpo[g,i] * log(1-(p[i]*(1-mu[i])))) +(sixthexpo[g,i] * log(chi[g,i]))
        # first  exponent
        firstexpo[g,i] <- sum(u[g,1:(i-1)])
        # second  exponent
        secondexpo_a[g,i] <- sum(u[g,1:i])
        secondexpo_b[g,i] <- sum(v[g,1:(i -1)])
        secondexpo[g,i] <- secondexpo_a[g,i] - secondexpo_b[g,i] - n[g,i]
        # third  exponent
        thirdexpo[g,i] <- sum(v[g,(i+1):s])
        # fourth  exponent
        fourthexpo[g,i] <- n[g,i]-d[g,i]
        # fifth  exponent
        fifthexpo[g,i] <- sum(u[g,(i+1):s])
        # sixth  exponent
        sixthexpo[g,i] <- v[g,i]-d[g,i]
    }
    #####  likelihood  denominator
    # 1st  product

    PROD1 [g,1]  <-1
     for (j in 1:(s -1)){
        PROD1_tmp [g,1,j] <- 0
    }
    # fill part of  PROD1_tmp
    for (i in 2:(s-1)) {
        for (j in i:(s -1)){
            PROD1_tmp[g,i,j] <- 0
        }
    }
    for (i in 2:s) {
        for (j in 1:(i -1)){
            PROD1_tmp[g,i,j] <- phi[g,j] * (1-(p[j]*(1-mu[j])))
        }
    }
    PROD1 [g,2]  <- PROD1_tmp [g,2,1]
    for (i in 3:s) {
        PROD1[g,i] <- prod(PROD1_tmp[g,i,1:(i-1)])
    }
    # 2nd  product
    PROD2[g,s] <- 1
    for (i in 1:(s-1)) {
        for (j in (i+1):s) {
            PROD2_tmp[g,i,j] <- gamma[g,j]
        }
    }
    # fill  part of  PROD2_tmp
    for (i in 1:(s-1)) {
        for (j in 1:i) {
            PROD2_tmp[g,i,j] <- 0
        }
    }
    PROD2[g,s-1]  <- PROD2_tmp [g,(s-1),s]
    for (i in 1:(s-2)) {
        PROD2[g,i] <- prod(PROD2_tmp[g,i,(i+1):s])
    }
    for (i in 1:s) {
        denom_base_tmp[g,i] <- xi[g,i] * PROD1[g,i] * PROD2[g,i] * p[i]
    }
    denom_base[g]  <- sum(denom_base_tmp [g,])
    denom_expo[g]  <- sum(u[g,1:s])
    l.denom[g]  <- denom_expo[g] * log(denom_base[g])

    
    #################  Define  xi and  chi
    for (i in 2:s) {
        xi.tmp[g,i] <- (1-gamma[g,i]) +(gamma[g,i] * ((1-p[i-1])/(1 -(p[i-1] * (1-mu[i -1])))) * xi[g,i-1])
        xi[g,i] <- max(xi.tmp[g,i] ,0.00001)
    }
    for (i in 1:(s-1)) {
        chi[g,i] <- (1-phi[g,i]) + (phi[g,i] * (1-p[i+1]) * chi[g,i+1])
    }
    }
    #################  Gamma  as  derived  parameter
    for(g in 1:2){

    for (i in 2:s) {
        gamma[g,i] <- phi[g,i-1] / rho[g,i-1]

    }}
    for(g in 1:2){
    for (i in 1:(s-1)) {
        rho[g,i] <- phi[g,i] + f[i]

    }}

}